{"version":3,"file":"monster.js","sourceRoot":"","sources":["../../src/view/creature/monster.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAU,YAAY,EAAC,MAAM,qBAAqB,CAAC;AAI1D,IAAqB,YAAY,GAAjC,MAAqB,YAAa,SAAQ,UAAU;IAApD;;QAkDE,cAAS,GAAG,CAAC,CAAC,CAAC,qBAAqB;QAQpC,YAAO,GAAmB,IAAI,CAAC;QAQ/B,WAAM,GAAkB,IAAI,CAAC;IA2B/B,CAAC;IAzBC,MAAM;QACJ,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI;YAAE,OAAO,kCAAkC,CAAC;QAC7F,OAAO,IAAI,CAAA;;4BAEa,IAAI,CAAC,uBAAuB,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI;;+CAEjC,IAAI,CAAC,cAAc,EAAE;;KAE/D,CAAC;IACJ,CAAC;IAEO,cAAc;QACpB,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG;YAAE,KAAK,GAAG,OAAO,CAAC;aACrC,IAAI,IAAI,CAAC,SAAS,GAAG,GAAG;YAAE,KAAK,GAAG,QAAQ,CAAC;;YAC3C,KAAK,GAAG,KAAK,CAAC;QACnB,OAAO,eAAe,KAAK,YAAY,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,CAAC;IACjE,CAAC;IAEO,uBAAuB;QAC7B,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI;YAAE,OAAO;QAClC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM;YAAE,OAAO,aAAa,CAAC;aAC/D,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,YAAY,CAAC,KAAK;YAAE,OAAO,YAAY,CAAC;;YAClE,OAAO,WAAW,CAAC;IAC1B,CAAC;CACF,CAAA;AA5FQ,mBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8ClB,CAAC;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;+CACX;AAQd;IANC,QAAQ,CAAC;QACR,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ;gBAAE,OAAiB,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;6CAC6B;AAQ/B;IANC,QAAQ,CAAC;QACR,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ;gBAAE,OAAgB,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;4CAC2B;AAlEV,YAAY;IADhC,aAAa,CAAC,eAAe,CAAC;GACV,YAAY,CA6FhC;eA7FoB,YAAY","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {Monster, MonsterTypes} from \"../../model/monster\";\nimport {Combat} from \"../../controller/combat\";\n\n@customElement('model-monster')\nexport default class ModelMonster extends LitElement {\n  static styles = css`\n    :host {\n      display: inline-block;\n      position: relative;\n      height: 70px;\n      width: 100px;\n      border: 1px solid #d49e43;\n      margin-right: 5px;\n      background: #260601;\n      position: relative;\n    }\n    .hp-bar {\n      display: block;\n      height: 5px;\n      width: 100%;\n      background: #333;\n      position: absolute;\n      top: 0;\n      left: 0;\n    }\n    .hp-bar-remaining {\n      display: block;\n      height: 5px;\n      width: 100%;\n      position: absolute;\n      top: 0;\n      left: 0;\n    }\n    .name {\n      font-size: 12px;\n      display: inline-block;\n      position: absolute;\n      top: 5px;\n      left: 0px;\n      padding: 0 5px;\n    }\n    .type-normal {\n      color: #eee;\n    }\n    .type-elite {\n      color: #ac8844;\n      background: radial-gradient(circle, rgba(255,255,255,0) 0%, rgba(106, 74, 14, 0.72) 0%, rgba(255,255,255,0) 100%);\n    }\n    .type-boss {\n      color: #b37706;\n    }\n  `;\n\n  @property({type: Number})\n  hpPercent = 1; // hp percentage left\n\n  @property({\n    converter: (v) => {\n      if (v !== null && typeof v === \"object\") return <Monster> v;\n      return null;\n    }\n  })\n  monster: Monster | null = null;\n\n  @property({\n    converter: (v) => {\n      if (v !== null && typeof v === \"object\") return <Combat> v;\n      return null;\n    }\n  })\n  combat: Combat | null = null;\n\n  render() {\n    if (this.monster === null || this.combat === null) return \"Invalid monster or combat obejct\";\n    return html`\n      <div>\n        <span class=\"name ${this._renderMonsterTypeClass()}\">${this.monster.name}</span>\n        <div class=\"hp-bar\" ></div>\n        <div class=\"hp-bar-remaining\" style=\"${this._renderHpStyle()}\"></div>\n      </div>\n    `;\n  }\n\n  private _renderHpStyle() {\n    let color = \"\";\n    if (this.hpPercent > 0.5) color = \"green\";\n    else if (this.hpPercent > 0.2) color = \"yellow\";\n    else color = \"red\";\n    return `background: ${color}; width: ${this.hpPercent * 100}%`;\n  }\n\n  private _renderMonsterTypeClass() {\n    if (this.monster === null) return;\n    if (this.monster.type === MonsterTypes.Normal) return \"type-normal\";\n    else if (this.monster.type === MonsterTypes.Elite) return \"type-elite\";\n    else return \"type-boss\";\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'model-monster': ModelMonster;\n  }\n}\n"]}