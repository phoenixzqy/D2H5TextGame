{"version":3,"file":"combat.js","sourceRoot":"","sources":["../src/controller/combat.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,OAAO,EAAqB,YAAY,EAAC,MAAM,kBAAkB,CAAC;AAC1E,OAAO,EAAC,SAAS,EAAsB,MAAM,oBAAoB,CAAC;AAElE,MAAM,YAAY,GAAG;IACjB,WAAW,EAAG,IAAI;IAClB,IAAI,EAAE;QACJ,GAAG,EAAE,CAAC;QACN,MAAM,EAAE,CAAC;QACT,YAAY,EAAE,CAAC;KAChB;CACJ,CAAA;AAED,SAAS,OAAO;IACd,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,YAAY,CAAC,WAAW,CAAC;AACnD,CAAC;AACD,MAAM,OAAO,MAAM;IAKjB;QACE,kCAAkC;QAClC,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,CAAC,CAAC;QAC7B,kBAAkB;QAClB,+CAA+C;QAC/C,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,SAAS,CAAuB;YACxD,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,KAAK;YACZ,EAAE,EAAE,IAAI;YACR,SAAS,EAAE,EAAE;YACb,UAAU,EAAE,EAAE;YACd,WAAW,EAAE,GAAG;SACjB,CAAC,CAAC,CAAC;QAEN,oBAAoB;QACpB,6CAA6C;QAC7C,sDAAsD;QACtD,qCAAqC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC;YAC1I,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,cAAc,GAAG,OAAO,EAAE,CAAC;gBAC/B,IAAI,CAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,OAAO,CAAqB;oBACrD,IAAI,EAAE,KAAK;oBACX,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM;oBAC/D,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;oBAC9B,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAClC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;oBACpC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;iBACtC,CAAC,CAAC,CAAC;aACL;SACF;IACH,CAAC;CAEF","sourcesContent":["import {Monster, MonsterAttributes, MonsterTypes} from \"../model/monster\";\nimport {Character, CharactorAttributes} from \"../model/character\";\n\nconst combatConfig = {\n    eliteChance : 0.05, // the chance to generate an elite\n    size: {\n      row: 3,\n      column: 9,\n      min_each_row: 2\n    }\n}\n\nfunction isElite() {\n  return Math.random() <= combatConfig.eliteChance;\n}\nexport class Combat {\n  // each side has max of 3 rows and 10 columns\n  monsters: Array<Array<Monster | null>>;\n  characters: Array<Array<Character | null>>; // including characters, summoned monsters and mercenary\n\n  constructor() {\n    // combat will be a 9 * 3 vs 9 * 3\n    this.monsters = [[],[],[]];\n    this.characters = [[],[],[]];\n    // generate player\n    // range play is always lays at middle back row\n    this.characters[2].push(new Character(<CharactorAttributes> {\n        name: \"Felix\",\n        class: \"sor\",\n        hp: 1000,\n        attackLow: 50,\n        attackHigh: 80,\n        attackSpeed: 1.5\n      }));\n    \n    // generate monsters\n    // 1. random number of monsters in each row. \n    // 2. insert monsters from the middle cell of each row\n    // 3. monster type should be randomed\n    for (let i = 0; i < combatConfig.size.row; i++) {\n      let monsterNum = Math.floor(Math.random() * (combatConfig.size.column - combatConfig.size.min_each_row)) + combatConfig.size.min_each_row;\n      for(let j = 0; j < monsterNum; j++) {\n        let isEliteMonster = isElite();\n        this .monsters[i].push(new Monster(<MonsterAttributes> {\n          name: \"沉沦魔\",\n          type: isEliteMonster ? MonsterTypes.Elite : MonsterTypes.Normal,\n          hp: isEliteMonster ? 500 : 100,\n          attackLow: isEliteMonster ? 20 : 5,\n          attackHigh: isEliteMonster ? 50 : 10,\n          attackSpeed: isEliteMonster ? 2 : 3.5,\n        }));\n      }\n    }\n  }\n\n}\n"]}